// Функция для добавления недостижимого кода в случайное место каждой функции
string addUnreachableCodeToEachFunction(const string& code) {
    // Регулярное выражение для поиска определений всех функций
    regex functionRegex("(\\w+\\s+\\w+\\s*\\(.*\\)\\s*\\{)");

    // Варианты недостижимого кода для добавления
    vector<string> unreachableCodeSamples = {
        "    if (0) {\n        cout << \"Этот код никогда не выполнится.\" << endl;\n    }\n",
        "    goto skip_code;\n    unreachable_code:\n    cout << \"Этот код никогда не выполнится.\" << endl;\n    skip_code:\n",
        "    while (false) {\n        cout << \"Этот код никогда не выполнится.\" << endl;\n    }\n"
    };

    uniform_int_distribution<mt19937::result_type> dist(1, 100); // Распределение от 1 до 100
    uniform_int_distribution<mt19937::result_type> codeDist(0, unreachableCodeSamples.size() - 1); // Для выбора варианта кода
    uniform_int_distribution<mt19937::result_type> positionDist(0, 1); // Для выбора позиции кода (0 - начало, 1 - конец)

    size_t searchStartPos = 0; // Начальная позиция для поиска функций
    string modifiedCode = code;

    // Проходим через все функции и добавляем один из вариантов недостижимого кода в начало или конец функции с вероятностью 50%
    while (true) {
        sregex_iterator iter(modifiedCode.begin() + searchStartPos, modifiedCode.end(), functionRegex);
        if (iter == sregex_iterator()) break; // Если функции не найдены, выходим из цикла

        smatch match = *iter;
        size_t functionStartPos = match.position() + searchStartPos;
        size_t functionEndPos = modifiedCode.find("}", functionStartPos);
        if (functionEndPos != string::npos) {
            // Генерируем случайное число и решаем, вставлять ли недостижимый код
            if (dist(rng) <= 50) { // 50% вероятность вставки недостижимого кода
                string unreachableCode = unreachableCodeSamples[codeDist(rng)]; // Выбираем случайный вариант кода
                size_t insertPos = positionDist(rng) == 0 ? functionStartPos + match.length() : functionEndPos;
                modifiedCode.insert(insertPos, unreachableCode);
                searchStartPos = insertPos + unreachableCode.length(); // Обновляем позицию для поиска следующей функции
            } else {
                searchStartPos = functionEndPos + 1; // Пропускаем функцию без добавления кода
            }
        } else {
            searchStartPos += match.length(); // Обновляем позицию для поиска следующей функции
        }
    }

    return modifiedCode;
}
